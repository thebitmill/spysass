$small-min: 0px !default;
$small-max: 639px !default;
$medium-min: 640px !default;
$medium-max: 1023px !default;
$large-min: 1024px !default;
$large-max: 1439px !default;
$xlarge-min: 1440px !default;
$xlarge-max: 1920px !default;
$xxlarge-min: 1921px !default;

$small-range: $small-min $small-max !default;
$medium-range: $medium-min $medium-max !default;
$large-range: $large-min $large-max !default;
$xlarge-range: $xlarge-min $xlarge-max !default;
//$xxlarge-range: 1921px, 999999px !default;

$module-types: 'components', 'functions', 'mixins', 'themes' !default;
$modules: ((), (), (), ()) !global;
$loading: () !global;

$warn-already-loaded: false !default;

$base-font-size: 16px !default;
$img-url: '/img' !default;

@function loaded-modules() {
	$str: 'Spysass Loaded Modules';
	$nl: '
';
	$title-pre: $nl + ' > ';
	$module-pre: $nl + '    > ';
	@for $t from 1 through length($module-types) {
		$list: nth($modules, $t);
		@if length($list) > 0 {
			$tmp: nth($module-types, $t);
			$str: $str + $title-pre + nth($module-types, $t);
			@for $l from 1 through length($list) {
				$str: $str + $module-pre + nth($list, $l);
			}
		}
	}
	@return $str;
}

// This function should be called at the beginning of each module file.
// It tests if the module has already been loaded. If not, it pushes
// it to the $loading 'stack', and runs the code inside the load-module block.
//     ex: @if load-module('base', 'components') {
@function load-module($name, $type) {
	$type-index: index($module-types, $type);
	$list: nth($modules, $type-index);

	@if length($list) > 0 and index($list, $name) {
		@if $warn-already-loaded {
			@warn 'Module already loaded: "' + $name + '" (' + $type + ')';
		}
		@return false;
	} @else {
		$loading: append($loading, ($name, $type-index)) !global;
		@return true;
	}
}

// This function needs to be called at the end of each load-module block.
// It basically pops a module from the $loading 'stack' and registers it in
// the appropriate list
@function register-module() {
	$t: nth($loading, length($loading));
	$name: nth($t, 1);
	$type-index: nth($t, 2);
	$list: append(nth($modules, $type-index), $name, 'space');

	// Remove last item from $loading list
	$length: length($loading);
	$result: ();

	// Pop the last module from $loading
	@for $i from 1 through $length {
		@if $i != $length {
			$result: append($result, nth($loading, $i));
		}
	}

	$loading: $result !global;

	// Rebuild $modules list
	$result: ();
	@for $i from 1 through length($modules) {
		@if $i == $type-index {
			$result: append($result, $list);
		} @else {
			$result: append($result, nth($modules, $i));
		}
	}
	$modules: $result !global;

	@return true;
}

@import "default-functions";

//
// Whitemill Grid
//
// Copied by LKM from Foundation 4.3.1 2013-09-09 15:14
//
// @version
//   0.1.0
//
// @title
//   Grid
//
@import "../mixins/grid";

// Right and Left "auto" for grid
%right-auto { #{$opposite-direction}: auto; }
%left-auto { #{$default-float}: auto; }

/* Grid HTML Classes */
.r {
	@include grid-row;

	&.collapse {
		.c { @include grid-column($collapse:true); }
	}

	.r { @include grid-row($behavior:nest);
		&.collapse { @include grid-row($behavior:nest-collapse); }
	}
	// -wf = width: full
	&.-wf {
		max-width: none;
	}
	&.c {
		@include grid-column($float: false,$include-position-relative: true);
		float: none !important;
		width: auto !important;
	}
}

.r > .c {
	@include grid-column($include-position-relative: true);
	&:last-child:not(:first-child), &.-e {
		float: $opposite-direction;
	}
}
.c { width: 100%; } // moved this out from .r > .c, otherwise selector above is more specific so it overrides all widths generated below


@media #{$screen} {

	@for $i from 1 through $total-columns {
		.-s#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
	}

	@for $i from 0 through $total-columns - 2 {
		.-s-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
	}

	[class*="column"] + [class*="column"]:last-child { float: $opposite-direction; }
	[class*="column"] + [class*="column"]._e { float: $default-float; }

	.c.-s_c { @include grid-column($center:true, $collapse:null, $float:false); }
}

@media #{$medium-min} {

	@for $i from 1 through $total-columns {
		.-m#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
	}

	@for $i from 0 through $total-columns - 1 {
		.-m-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
	}

	@for $i from 1 through $total-columns - 1 {
		.-m-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
		.-m-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
	}

	.c.-m_c { @include grid-column($center:true, $collapse:null, $float:false); }

	.c.-m_uc {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		float: $default-float !important;
	}

}

@media #{$large-min} {

	@for $i from 1 through $total-columns {
		.-l#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
	}

	@for $i from 0 through $total-columns - 1 {
		.-l-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
	}

	@for $i from 1 through $total-columns - 1 {
		.-l-push#{-$i} { @include grid-column($push:$i, $collapse:null, $float:false); }
		.-l-pull#{-$i} { @include grid-column($pull:$i, $collapse:null, $float:false); }
	}

	.c.-l_c { @include grid-column($center:true, $collapse:null, $float:false); }

	.c.-l_uc {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		float: $default-float !important;
	}

}

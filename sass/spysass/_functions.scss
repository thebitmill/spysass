// It strips the unit of measure and returns it
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)base-font-size
@function convert-to-em($value,$base-font-size: $base-font-size)  {
	$value: strip-unit($value) / strip-unit($base-font-size) * 1em;
	@if ($value == 0em) { $value: 0; } // Turn 0em into 0
	@return $value;
}

// Converts "px" to "rem" using the ($)base-font-size
@function convert-to-rem($value, $base-value: $base-font-size)  {
    @warn unit($value);
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
    @return $value;
}

// Working in rems is annoying. Think in pixels by using this handy function
// Just enter the number, no need to mention "px"
@function rem-calc($values, $base-value: $base-font-size) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $rem-values: ();
  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $rem-values;
}

// Working in ems is annoying. Think in pixels by using this handy function
// Just enter the number, no need to mention "px"
@function em-calc($values, $base-value: $base-font-size) {
	$max: length($values); // Get the total number of parameters passed

	// If there is only 1 parameter, then return it as an integer.
	// This is done because a list can't be multiplied or divided even if it contains a single value
	@if $max == 1 { @return convert-to-em(nth($values, 1)); }

	$em-values: (); // This will eventually store the converted $values in a list
	@for $i from 1 through $max {
		$em-values: append($em-values, convert-to-em(nth($values, $i)));
	}
	@return $em-values;
}

// RANGES
// We use these functions to define ranges for various things, like media queries. 
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

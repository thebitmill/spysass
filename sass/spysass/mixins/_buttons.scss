// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

//
// @variables
//

// We use this to control the display property.
$button-display: inline-block !default;
$button-margin-bottom: 20px !default;

// We use these to control button text styles.
$button-font-family: $body-font-family !default;
$button-font-color: #fff !default;
$button-font-color-alt: #333 !default;
$button-font-size-tiny: 11px !default;
$button-font-size-small: 13px !default;
$button-font-size-medium: 16px !default;
$button-font-size-large: 20px !default;
$button-font-weight: bold !default;
$button-font-align: center !default;

$button-height-tiny: 20px !default;
$button-height-small: 30px !default;
$button-height-medium: 40px !default;
$button-height-large: 50px !default;

$button-padding: 20px;
// We use these to control various hover effects.
$button-function-factor: -20% !default;

// We use these to control button border styles.
$button-border-width: 0px !default;
$button-border-style: solid !default;
$bg: $color-main-1 !default;
$button-border-color: scale-color($bg, $lightness: $button-function-factor) !default;

// We use this to set the default radius used throughout the core.
$button-radius: $global-radius !default;
$button-round: 1000px !default;

// We use this to set default opacity for disabled buttons.
$button-disabled-opacity: 0.7 !default;


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

@mixin button-base($style:true, $display:$button-display) {
  @if $style {
    border-style: $button-border-style;
    border-width: $button-border-width;
    cursor: pointer;
    font-family: $button-font-family;
    font-weight: $button-font-weight;
    line-height: 1;
    margin: 0 0 $button-margin-bottom;
    position: relative;
    text-decoration: none;
    text-align: $button-font-align;
  }
  @if $display { display: $display; }
}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= em-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

@mixin button-size($size: false, $height: $button-height-medium, $font-size: $button-font-size-medium, $padding: $button-padding, $full-width:false) {

	@if $size == tiny {
		height: rem-calc($button-height-tiny);
		padding: rem-calc(( $button-height-tiny - $button-font-size-tiny ) / 2 - 1 $padding);
		font-size: rem-calc($button-font-size-tiny);
	} @else  if $size == small {
		height: rem-calc($button-height-small);
		padding: rem-calc(( $button-height-small - $button-font-size-small ) / 2 - 1 $padding);
		font-size: rem-calc($button-font-size-small);
	} @else  if $size == medium {
		height: rem-calc($button-height-medium);
		padding: rem-calc(( $button-height-medium - $button-font-size-medium ) / 2 - 1 $padding);
		font-size: rem-calc($button-font-size-medium);
	} @else  if $size == large {
		height: rem-calc($button-height-large);
		padding: rem-calc(( $button-height-large - $button-font-size-large ) / 2 - 1 $padding);
		font-size: rem-calc($button-font-size-large);
	} @else {
		height: rem-calc($height);
		padding: rem-calc(( $height - $font-size ) / 2 - 1 $padding);
		font-size: rem-calc($font-size);
	}
	@if $full-width {
		width: 100%;
	}
}
@mixin button-style-thoughtbot() {
	background-color: #ee432e;
	@include background(linear-gradient(180deg, #ee432e 0%, #c63929 50%, #b51700 50%, #891100 100%));
	border: 1px solid #951100;
	border-radius: 5px;
	@include box-shadow(inset 0 0 0 1px rgba(255, 115, 100, 0.4), 0 1px 3px #333333);
	text-shadow: 0 -1px 1px rgba(0, 0, 0, 0.8);
	&:hover {
		@include background(linear-gradient(180deg, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%));
	}
	&:active {
		background-color: #d43c28;
		@include background(linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%));
		@include box-shadow(inset 0 0 0 1px rgba(255, 115, 100, 0.4)); 
	}
}
//@mixin button-style-thoughtbot($height: 40px, $color: #c63929) {
@mixin button-style-glossy($height: 40px, $color: $color-main-1) {
	background: $color;
	@include background(linear-gradient(180deg, lighten($color, 10%) 0%, $color 50%, darken($color, 5%) 50%, darken($color, 15%) 100%));
	border: 1px solid darken($color, 15%);
	border-radius: 5px;
	@include box-shadow(inset 0 0 0 1px rgba(lighten($color, 20%), 0.4), 0 1px 3px #333);
	color: #fff;
	text-shadow: 0 -1px 1px rgba(0, 0, 0, .8);

	&:hover {
		@include background(linear-gradient(top, lighten($color, 25%) 0%, lighten($color, 5%) 50%, darken($color, 5%) 50%, darken($color, 20%) 100%));
		//@include background(linear-gradient(top, #f37873 0%, #db504d 50%, #cb0500 50%, #a20601 100%));
		//@include background(linear-gradient(top, lighten($color, 40%) 0%, #db504d 50%, #cb0500 50%, #a20601 100%));
	}

	&:active {
		@include background(linear-gradient(top, #d43c28 0%, #ad3224 50%, #9c1500 50%, #700d00 100%));
		@include box-shadow(inset 0 0 0 1px rgba(lighten($color, 20%), 0.4));
	}
}
@mixin button-glossy() {
	@include button-base;
	@include button-size($size: medium);
	@include button-style-glossy;
}
@mixin button-thoughtbot() {
	@include button-base;
	@include button-size($size: medium);
	@include button-style-thoughtbot;
}

// We use this mixin to add button color styles
//
// $bg - Primary color set in settings file. Default: $primary-color.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
@mixin button-style-foundation($bg:$color-main-1, $radius:false, $disabled:false) {

  // We control which background styles are used,
  // these can be removed by setting $bg:false
  @if $bg {
    // This find the lightness percentage of the background color.
    $bg-lightness: lightness($bg);

    background-color: $bg;
    border-color: scale-color($bg, $lightness: $button-function-factor);
    &:hover,
    &:focus { background-color: scale-color($bg, $lightness: $button-function-factor); }

    // We control the text color for you based on the background color.
    @if $bg-lightness > 70% {
      color: $button-font-color-alt;
      &:hover,
      &:focus { color: $button-font-color-alt; }
    }
    @else {
      color: $button-font-color;
      &:hover,
      &:focus { color: $button-font-color; }
    }
  }

  // We can set $disabled:true to create a disabled transparent button.
  @if $disabled {
    cursor: $cursor-default-value;
    opacity: $button-disabled-opacity;
    box-shadow: none;
    &:hover,
    &:focus { background-color: $bg; }
  }

  // We can control how much button radius us used.
  @if $radius == true { @include radius($button-radius); }
  @else if $radius { @include radius($radius); }

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= em-calc(12)
// $bg - Primary color set in settings file. Default: $primary-color.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-input - <input>'s and <button>'s take on strange padding. We added this to help fix that. Default:false.
// $is-prefix - Not used? Default:false.
@mixin button-foundation($padding:$button-med, $bg:$color-main-1, $radius:false, $full-width:false, $disabled:false, $is-prefix:false) {
  @include button-foundation-base;
  @include button-foundation-size($padding, $full-width);
  @include button-foundation-style($bg, $radius, $disabled);
}


//@include exports("button") {
//  @if $include-html-button-classes {
//
//    // Default styles applied outside of media query
//    button, .button {
//      @include button-base;
//      @include button-size;
//      @include button-style;
//
//      @include single-transition(background-color);
//
//      &.secondary { @include button-style($bg:$secondary-color); }
//      &.success   { @include button-style($bg:$success-color); }
//      &.alert     { @include button-style($bg:$alert-color); }
//
//      &.large  { @include button-size($padding:$button-lrg); }
//      &.small  { @include button-size($padding:$button-sml); }
//      &.tiny   { @include button-size($padding:$button-tny); }
//      &.expand { @include button-size($padding:null,$full-width:true); }
//
//      &.left-align  { text-align: left; text-indent: em-calc(12); }
//      &.right-align { text-align: right; padding-right: em-calc(12); }
//
//      &.radius { @include button-style($bg:false, $radius:true); }
//      &.round  { @include button-style($bg:false, $radius:$button-round); }
//
//      &.disabled, &[disabled] { @include button-style($bg:$primary-color, $disabled:true);
//        &.secondary { @include button-style($bg:$secondary-color, $disabled:true); }
//        &.success { @include button-style($bg:$success-color, $disabled:true); }
//        &.alert { @include button-style($bg:$alert-color, $disabled:true); }
//      }
//    }
//
//    @media #{$medium-up} {
//      button, .button {
//        @include button-base($style:false, $display:inline-block);
//        @include button-size($padding:false, $full-width:false);
//      }
//    }
//  }
//}

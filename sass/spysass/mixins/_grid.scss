//
// Grid Variables
//

$row-width: 960px !default;
$column-gutter: 30px !default;
$total-columns: 12 !default;

//
// Grid Calc Function
//

@function grid-calc($col-number, $total-columns, $responsive:true) {
	@if $responsive {
		@return percentage(($col-number / $total-columns));
	} @else {
		@return (($col-number / $total-columns) * $row-width) - $column-gutter;
	}
}

// Right and Left "auto" for grid
%right-auto { #{$opposite-direction}: auto; }
%left-auto { #{$default-float}: auto; }

//
// Grid Mixins
//

// Create default, nested, and collapsed rows
@mixin grid-row($behavior: false,$responsive:true) {

	// use @include grid-row(nest); to include a nested row
	@if $behavior == nest {
		margin-#{$default-float}: -($column-gutter/2);
		margin-#{$opposite-direction}: -($column-gutter/2);
		max-width: none;
		width: auto;
		padding: 0;
	}

// use @include grid-row(collapse); to collapsed a container row margins
	@else if $behavior == collapse {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		@if $responsive {
			max-width: $row-width;
			width: 100%;
		} @else {
			width: $row-width;
		}
	}

	// use @include grid-row(nest-collapse); to collapse outer margins on a nested row
	@else if $behavior == nest-collapse {
		margin-#{$default-float}: 0;
		margin-#{$opposite-direction}: 0;
		max-width: none;
		width: auto;
	}

	// use @include grid-row; to use a container row
	@else {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		margin-top: 0;
		margin-bottom: 0;
		@if $responsive {
			max-width: $row-width;
			width: 100%;
		} @else {
			width: $row-width;
		}
	}
	@include pie-clearfix;// LKM: switched to compass clearfix
}


// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:true, $include-position-relative: false, $responsive: true) {

	// If collapsed, get rid of gutter padding
	@if $collapse {
		padding-left: 0;
		padding-right: 0;
	}

	// Gutter padding whenever a column isn't set to collapse
	// (use $collapse:null to do nothing)
	@else if $collapse == false {
		padding-left: $column-gutter / 2;
		padding-right: $column-gutter / 2;
	}

	// If a column number is given, calculate width
	@if $columns {
		width: grid-calc($columns, $total-columns, $responsive);

		// If last column, float naturally instead of to the right
		@if $last-column { float: $opposite-direction; }
	}

	// If offset, calculate appropriate margins
	@if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns); }

	// Source Ordering, adds left/right depending on which you use.
	@if $push { #{$default-float}: grid-calc($push, $total-columns, $responsive); #{$opposite-direction}: auto; }
	@if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns, $responsive); #{$default-float}: auto; }

	// If centered, get rid of float and add appropriate margins
	@if $center {
		margin-#{$default-float}: auto;
		margin-#{$opposite-direction}: auto;
		float: none !important;
	}

	@if $float {
		@if $float == left or $float == true { float: $default-float; }
		@else if $float == right { float: $opposite-direction; }
		@else { float: none; }
	}

	// This helps us not need to repeat "position:relative" everywehere
	@if $include-position-relative { position: relative; }
}

// It strips the unit of measure and returns it
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value,$em-base: $em-base)  {
	$value: strip-unit($value) / strip-unit($em-base) * 1em;
	@if ($value == 0em) { $value: 0; } // Turn 0em into 0
	@return $value;
}

// Converts "px" to "rem" using the ($)em-base
@function convert-to-rem($value, $base-value: $em-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// Working in rems is annoying. Think in pixels by using this handy function
// Just enter the number, no need to mention "px"
@function rem-calc($values, $base-value: $em-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $rem-values: ();
  @for $i from 1 through $max {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $rem-values;
}

// Working in ems is annoying. Think in pixels by using this handy function
// Just enter the number, no need to mention "px"
@function em-calc($values, $base-value: $em-base) {
	$max: length($values); // Get the total number of parameters passed

	// If there is only 1 parameter, then return it as an integer.
	// This is done because a list can't be multiplied or divided even if it contains a single value
	@if $max == 1 { @return convert-to-em(nth($values, 1)); }

	$em-values: (); // This will eventually store the converted $values in a list
	@for $i from 1 through $max {
		$em-values: append($em-values, convert-to-em(nth($values, $i)));
	}
	@return $em-values;
}

@mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($color-main-1, .25)) {
  transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

  &:#{$selector} {
    box-shadow: 0 0 5px $glowing-effect-color;
    border-color: $glowing-effect-color;
  }
}

@mixin css-triangle($triangle-height, $triangle-direction, $triangle-width:2*$triangle-height, $triangle-color:$color-main-1) {
	width: 0;
	height: 0;
	@if ($triangle-direction == top) {
		border-left: $triangle-width / 2 solid transparent;
		border-bottom: $triangle-height solid $triangle-color;
		border-right: $triangle-width / 2 solid transparent;
	}
	@if ($triangle-direction == bottom) {
		border-left: $triangle-width / 2 solid transparent;
		border-top: $triangle-height solid $triangle-color;
		border-right: $triangle-width / 2 solid transparent;
	}
	@if ($triangle-direction == left) {
		border-top: $triangle-width / 2 solid transparent;
		border-right: $triangle-height solid $triangle-color;
		border-bottom: $triangle-width / 2 solid transparent;
	}
	@if ($triangle-direction == right) {
		border-top: $triangle-width / 2 solid transparent;
		border-left: $triangle-height solid $triangle-color;
		border-bottom: $triangle-width / 2 solid transparent;
	}
}
@mixin css-right_angle-triangle($triangle-size, $triangle-color, $triangle-direction) {
	width: 0;
	height: 0;
	border: inset $triangle-size;
	@if ($triangle-direction == top) {
		border-color: $triangle-color transparent transparent transparent;
		border-top-style: solid;
	}
	@if ($triangle-direction == bottom) {
		border-color: transparent transparent $triangle-color transparent;
		border-bottom-style: solid;
	}
	@if ($triangle-direction == left) {
		border-color: transparent transparent transparent $triangle-color;
		border-left-style: solid;
	}
	@if ($triangle-direction == right) {
		border-color: transparent $triangle-color transparent transparent;
		border-right-style: solid;
	}
}
